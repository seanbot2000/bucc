jobs:
- name: compile-releases-manifest
  public: true
  serial: true
  plan:
  - in_parallel:
    - { get: compile-manifest, resource: compiled-releases-manifest }
    - { get: bucc, trigger: true, passed: [sanity-check] }
    - { get: bucc-ci }
  - task: compile-manifest
    file: bucc-ci/ci/tasks/compile-manifest/task.yml
    params:
      RELEASES: &releases
      - name: concourse
      - name: os-conf
      - name: credhub-importer
      - name: postgres
      - name: bucc-bbr
      - name: vault-credhub-proxy
      - name: director-bosh-dns
      - name: bosh-dns
      - name: garden-runc
  - put: compiled-releases-manifest
    params: { repository: compile-manifest-out }

- name: deploy-compile-releases
  public: true
  serial: true
  serial_groups: [ bosh-lite ]
  plan:
  - in_parallel:
    - { get: compiled-releases-manifest, trigger: true }
    - { get: bucc-ci }
  - task: upload-stemcell
    input_mapping: { manifest: compiled-releases-manifest }
    file: bucc-ci/ci/tasks/upload-stemcell/task.yml
    params:
      BOSH_ENVIRONMENT: (( grab meta.lite.target ))
      BOSH_CLIENT: admin
      BOSH_CLIENT_SECRET: (( grab meta.lite.client_secret ))
      BOSH_CA_CERT: (( grab meta.lite.ca_cert ))
  - put: compile
    params:
      manifest: compiled-releases-manifest/manifest.yml
      cleanup: true

- name: download-compile-releases
  public: true
  serial: true
  serial_groups: [ bosh-lite ]
  plan:
  - get: bucc-ci
  - get: compile
    trigger: true
    # tags: [vsphere]
    params:
      compiled_releases: *releases
  - task: remove-already-compiled-releases
    input_mapping: { compiled-releases-in: compile }
    file: bucc-ci/ci/tasks/remove-already-compiled-releases/task.yml
  - in_parallel:
    - try:
        put: compiled-releases-concourse
        params: { file: "compiled-releases-clean/concourse*.tgz", acl: public-read }
    - try:
        put: compiled-releases-os-conf
        params: { file: "compiled-releases-clean/os-conf*.tgz", acl: public-read }
    - try:
        put: compiled-releases-credhub-importer
        params: { file: "compiled-releases-clean/credhub-importer*.tgz", acl: public-read }
    - try:
        put: compiled-releases-postgres
        params: { file: "compiled-releases-clean/postgres*.tgz", acl: public-read }
    - try:
        put: compiled-releases-bucc-bbr
        params: { file: "compiled-releases-clean/bucc-bbr*.tgz", acl: public-read }
    - try:
        put: compiled-releases-vault-credhub-proxy
        params: { file: "compiled-releases-clean/vault-credhub-proxy*.tgz", acl: public-read }
    - try:
        put: compiled-releases-director-bosh-dns
        params: { file: "compiled-releases-clean/director-bosh-dns*.tgz", acl: public-read }
    - try:
        put: compiled-releases-bosh-dns
        params: { file: "compiled-releases-clean/bosh-dns*.tgz", acl: public-read }
    - try:
        put: compiled-releases-garden-runc
        params: { file: "compiled-releases-clean/garden-runc*.tgz", acl: public-read }
  on_failure:
    put: notify
    params:
      channel:  (( grab meta.slack.channel ))
      username: (( grab meta.slack.username ))
      icon_url: (( grab meta.slack.icon ))
      text:    '(( concat meta.slack.fail_url " " meta.pipeline ": compiled-releases job failed" ))'
